using System.Collections;
using System.Collections.Generic;
using System.Security;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEngine.SceneManagement;
using static Unity.VisualScripting.Member;

public class GameManager : MonoBehaviour {

    [Header("References")]
    private UIController uiController;
    private AudioManager audioManager;

    [Header("Information")]
    [SerializeField] private List<InformationCategory> categories;
    [SerializeField] private int extraElements;

    [Header("Attempts")]
    [SerializeField] private int maxAttempts;
    private int attemptsRemaining;

    [Header("Password")]
    private List<PasswordElement> passwordElements;
    private string currPassword;

    [Header("Loading")]
    private AsyncOperation sceneLoad;

    [Header("Background")]
    [SerializeField] private Color[] backgroundColors;

    private void Start() {

        uiController = FindObjectOfType<UIController>();
        audioManager = FindObjectOfType<AudioManager>();

        attemptsRemaining = maxAttempts; // set the attempts remaining to the max attempts
        uiController.UpdateAttemptsText(attemptsRemaining); // update attempts text

        // CUSTOM CATEGORIES (GENERATED BY SCRIPT)
        // favorite numbers category (1-99)
        List<string> favoriteNums = new List<string>();

        for (int i = 1; i < 100; i++)
            favoriteNums.Add(i.ToString());

        InformationCategory favoriteNumCategory = new InformationCategory("Number", favoriteNums);

        categories.Add(favoriteNumCategory);

        List<InformationCategory> categoriesAvailable = categories; // create a temporary list of categories available
        List<PasswordElement> information = new List<PasswordElement>(); // create a temporary list of information

        for (int i = 0; i < 3 + extraElements; i++) { // 3 elements in password

            if (categoriesAvailable.Count == 0) { // no more categories available

                Debug.LogError("Not enough categories for information elements"); // print an error message
                break;

            }

            int categoryIndex = Random.Range(0, categoriesAvailable.Count); // get a random category
            string randInfo = categoriesAvailable[categoryIndex].GetRandomInformation(); // get random information from the category
            PasswordElementText text = uiController.AddInformation(categoriesAvailable[categoryIndex].GetCategoryName(), randInfo); // add random information to UI
            information.Add(new PasswordElement(randInfo, text));
            categoriesAvailable.RemoveAt(categoryIndex); // remove the category from the list

        }

        GeneratePassword(information); // generate the password

        Camera.main.backgroundColor = backgroundColors[Random.Range(0, backgroundColors.Length)]; // set the background color randomly

    }

    private void GeneratePassword(List<PasswordElement> information) {

        passwordElements = new List<PasswordElement>(); // create temporary list to store password elements IN ORDER
        currPassword = ""; // reset the current password

        for (int i = 0; i < 3; i++) { // 3 elements in password

            int randIndex = Random.Range(0, information.Count);
            currPassword += information[randIndex].GetInformation(); // add random information to password
            passwordElements.Add(information[randIndex]); // add information to the list
            information.RemoveAt(randIndex); // remove information from the list

        }

        print(currPassword);

    }

    public void ValidateSubmission(string input) {

        uiController.UpdateAttemptsText(--attemptsRemaining); // decrement attempts remaining & update the attempts text
        uiController.ResetAllInformationColors(); // reset all information colors before updating them

        if (input.Equals(currPassword, System.StringComparison.OrdinalIgnoreCase)) {

            foreach (PasswordElement element in passwordElements)
                element.GetText().SetCorrectColor(); // set the color of the text to correct color

            uiController.FlashCorrectColor(); // flash correct color
            audioManager.PlaySound(SoundEffectType.Correct); // play correct sound
            uiController.ShowGameCompleteScreen(); // show game complete screen
            return;

        }

        int nextStart = 0;
        bool partialCorrect = false;

        for (int i = 0; i < passwordElements.Count; i++) {

            if (input.IndexOf(passwordElements[i].GetInformation(), System.StringComparison.OrdinalIgnoreCase) == nextStart) {

                partialCorrect = true;
                passwordElements[i].GetText().SetCorrectColor(); // set the color of the text to correct color (correct element, correct position)

            } else if (input.IndexOf(passwordElements[i].GetInformation(), System.StringComparison.OrdinalIgnoreCase) != -1) {

                partialCorrect = true;
                passwordElements[i].GetText().SetPartialCorrectColor(); // set the color of the text to partial correct color (correct element, wrong position)

            }

            nextStart = i + passwordElements[i].GetInformation().Length; // update next string start

        }

        if (partialCorrect) {

            uiController.FlashPartialCorrectColor(); // flash partial correct color
            audioManager.PlaySound(SoundEffectType.PartialIncorrect); // play partial incorrect sound

        } else {

            uiController.FlashIncorrectColor(); // flash incorrect color
            audioManager.PlaySound(SoundEffectType.Incorrect); // play incorrect sound

        }

        if (attemptsRemaining == 0)
            uiController.ShowGameOverScreen(); // show game over screen

    }

    public void StartReloadScene() {

        sceneLoad = SceneManager.LoadSceneAsync(SceneManager.GetActiveScene().buildIndex); // reload the scene
        sceneLoad.allowSceneActivation = false;

    }

    public void FinishReloadScene() {

        sceneLoad.allowSceneActivation = true;

    }

    public string GetPassword() { return currPassword; }

}
